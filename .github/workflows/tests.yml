name: Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        # Install test dependencies if they exist
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run unit tests
      run: |
        python -m unittest discover tests/ -v
    
    - name: Test AUTO-TUNE functionality
      run: |
        # Create a test CSV file
        cat > test_data.csv << EOF
        ID1,ID2,Distance
        A,B,0.001
        C,D,0.002
        E,F,0.003
        G,H,0.005
        EOF
        
        # Test AUTO-TUNE with Singletons column
        python scripts/hivnetworkcsv -i test_data.csv -t 0.01 -A 0.0001 -f plain > output.tsv
        
        # Verify Singletons column exists
        if ! head -1 output.tsv | grep -q "Singletons"; then
          echo "ERROR: Singletons column not found in output"
          cat output.tsv
          exit 1
        fi
        
        echo "✅ AUTO-TUNE functionality working correctly"
        
        # Clean up
        rm test_data.csv output.tsv
    
    - name: Test script help
      run: |
        python scripts/hivnetworkcsv --help > /dev/null
        echo "✅ Script help working correctly"

  test-integration:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4  
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Integration test - Singleton decreasing pattern
      run: |
        # Create a larger test dataset
        cat > integration_test.csv << EOF
        ID1,ID2,Distance
        A,B,0.001
        A,C,0.002
        B,C,0.003
        D,E,0.005
        F,G,0.007
        H,I,0.009
        J,K,0.012
        EOF
        
        # Run AUTO-TUNE and check decreasing pattern
        python scripts/hivnetworkcsv -i integration_test.csv -t 0.02 -A 0.0001 -f plain > integration_output.tsv
        
        # Verify decreasing singleton pattern with Python
        python << 'PYTHON_EOF'
        import sys
        
        with open('integration_output.tsv', 'r') as f:
            lines = f.readlines()
        
        header = lines[0].strip().split('\t')
        singletons_idx = header.index('Singletons')
        
        prev_singletons = None
        decreasing_count = 0
        total_comparisons = 0
        
        for line in lines[1:]:
            if line.strip():
                cols = line.strip().split('\t')
                if len(cols) > singletons_idx:
                    singletons = int(cols[singletons_idx])
                    
                    if prev_singletons is not None:
                        total_comparisons += 1
                        if singletons <= prev_singletons:
                            decreasing_count += 1
                        print(f"Threshold {cols[0]}: {singletons} singletons ({'✅' if prev_singletons is None or singletons <= prev_singletons else '❌'})")
                    else:
                        print(f"Threshold {cols[0]}: {singletons} singletons (baseline)")
                    
                    prev_singletons = singletons
        
        # Allow some tolerance for biological variation
        success_rate = decreasing_count / total_comparisons if total_comparisons > 0 else 0
        print(f"\nSingleton decrease success rate: {decreasing_count}/{total_comparisons} ({success_rate:.1%})")
        
        if success_rate >= 0.8:  # 80% success rate threshold
            print("✅ Integration test passed - singletons generally decrease as expected")
            sys.exit(0)
        else:
            print("❌ Integration test failed - singletons not decreasing as expected")
            sys.exit(1)
        PYTHON_EOF
        
        # Clean up
        rm integration_test.csv integration_output.tsv